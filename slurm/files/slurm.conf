# slurm.conf file generated by configurator.html.
# Put this file on all nodes of your cluster.
# See the slurm.conf man page for more information.
#
{%- set  slurm_conf = pillar.get('slurm', {}) %}
{%- set  nodedefs = slurm_conf.get('nodedef', {}) %}
ClusterName={{  pillar['slurm']['ClusterName'] }}
ControlMachine={{  pillar['slurm']['ControlMachine'] }}
ControlAddr={{  pillar['slurm']['ControlAddr'] }}
{% if 'BackupController' in pillar['slurm']  -%}
BackupController={{ salt['pillar.get']('slurm:BackupController','' )}}
BackupAddr={{ salt['pillar.get']('slurm:BackupAddr','' )}}
{% endif -%}
{% if salt['pillar.get']('slurm:AuthType') in ['munge','none','authd'] -%}
AuthType=auth/{{ salt['pillar.get']('slurm:AuthType')}}
{% endif -%}
{% if salt['pillar.get']('slurm:CryptoType') in ['munge','openssl'] -%}
CryptoType=crypto/{{salt['pillar.get']('slurm:CryptoType') }}
{% endif -%}
CacheGroups=0
{% if salt['pillar.get']('slurm:CryptoType') in ['aix','blcr','none','ompi'] -%}
CheckpointType=checkpoint/{{salt['pillar.get']('slurm:CryptoType') }}
{% endif -%}
#DisableJobs=NO
#EnforcePartLimits=NO
#Epilog=
#EpilogSlurmctld=
#FirstJobId=1
#MaxJobId=999999
{% if 'GresTypes' in pillar['slurm']  -%}
GresTypes={{ salt['pillar.get']('slurm:GresTypes')}}
{% endif -%}
#GroupUpdateForce=0
#GroupUpdateTime=600
#JobCheckpointDir=/var/slurm/checkpoint
#JobCredentialPrivateKey=
#JobCredentialPublicCertificate=

JobFileAppend={{ salt['pillar.get']('slurm:JobFileAppend','0' )}}
JobRequeue={{ salt['pillar.get']('slurm:JobRequeue','0' )}}
{% if slurm_conf.JobSubmitPlugins is defined -%}
JobSubmitPlugins="job_submit/{{ salt['pillar.get']('slurm:JobSubmitPlugins','defaults' )}}"
{%endif -%}
KillOnBadExit={{ salt['pillar.get']('slurm:KillOnBadExit','0' )}}

#Licenses=foo*4,bar
{% if 'MailProg' in pillar['slurm']  -%}
MailProg={{ salt['pillar.get']('slurm:MailProg')}}
{% endif -%}
MaxJobCount={{ salt['pillar.get']('slurm:MaxJobCount','5000' )}}
MaxStepCount={{ salt['pillar.get']('slurm:MaxStepCount','4000' )}}
MaxTasksPerNode={{ salt['pillar.get']('slurm:MaxTasksPerNode','128' )}}
MaxArraySize= {{ salt['pillar.get']('slurm:MaxArraySize','1001' )}}
MpiDefault={{ salt['pillar.get']('slurm:MpiDefault','none' )}}
MpiParams=ports={{ salt['pillar.get']('slurm:MpiParamsPort','12000-12999' )}}
PluginDir={{ salt['pillar.get']('slurm:PluginDir','/usr/lib64/slurm' )}}
#PlugStackConfig=

PrivateData={{ salt['pillar.get']('slurm:PrivateData','accounts,users,usage,jobs' )}}
ProctrackType={{ salt['pillar.get']('slurm_config:ProctrackType','proctrack/cgroup' )}}
#Prolog=
#PrologSlurmctld=
#PropagatePrioProcess=0
{% if 'PropagateResourceLimits' in pillar['slurm']  -%}
PropagateResourceLimits={{ salt['pillar.get']('slurm:PropagateResourceLimits')}}

{% endif -%}
{% if 'PropagateResourceLimitsExcept' in pillar['slurm']  -%}
PropagateResourceLimitsExcept={{ salt['pillar.get']('slurm:PropagateResourceLimitsExcept')}}
{% endif -%}
ReturnToService=2
#SallocDefaultCommand=
SlurmctldPidFile={{ salt['pillar.get']('slurm:SlurmctldPidFile', '/var/run/slurmctld.pid')}}
#SlurmctldPort=6816-6817
SlurmdPidFile={{ salt['pillar.get']('slurm:SlurmdPidFile', '/var/run/slurmd.pid')}}
#SlurmdPort=6818
SlurmdSpoolDir=/tmp/slurmd.%n.spool
SlurmUser=slurm
#SlurmdUser=
#SrunEpilog=
#SrunProlog=
StateSaveLocation={{ salt['pillar.get']('slurm:StateSaveLocation','/var/slurm/state/' )}}
SwitchType=switch/none
#TaskEpilog=
{% if salt['pillar.get']('slurm:TaskPlugin') in ['affinity','none','cgroup'] -%}
TaskPlugin=task/{{ salt['pillar.get']('slurm:TaskPlugin')}}
{% else -%}
TaskPlugin=task/none
{% endif -%}
#TaskProlog=
{% if salt['pillar.get']('slurm:TopologyPlugin') in ['tree','none','3d_torus'] -%}
TopologyPlugin=topology/{{ salt['pillar.get']('slurm:TopologyPlugin')}}
{% else -%}
TopologyPlugin=topology/none
{% endif -%}
#TmpFs=/tmp
#TrackWCKey=no
TreeWidth=64
#UnkillableStepProgram=
#UsePAM=0k
#
#
# TIMERS
BatchStartTimeout=180
#CompleteWait=0
#EpilogMsgTime=2000
#GetEnvTimeout=2
#HealthCheckInterval=0
#HealthCheckProgram=
InactiveLimit=100
KillWait=60
MessageTimeout=100
#ResvOverRun=0
MinJobAge=300
#OverTimeLimit=0
SlurmctldTimeout=600
SlurmdTimeout=600
#UnkillableStepTimeout=60
#VSizeFactor=0
Waittime=0
#
#
# SCHEDULING
DefMemPerCPU={{ salt['pillar.get']('slurm:DefMemPerCPU', 2048 )}}
FastSchedule=0
#MaxMemPerCPU=4096
#SchedulerFilter=1
SchedulerTimeSlice=30
SchedulerType=sched/backfill
#SchedulerType=sched/builtin
#SchedulerPort=7321
SchedulerParameters=max_job_bf=100,interval=30
SelectType=select/cons_res
SelectTypeParameters={{ salt['pillar.get']('slurm:SelectTypeParameters', 'CR_Core') }}
PreemptType=preempt/partition_prio
PreemptMode=GANG,SUSPEND
#
#
# JOB PRIORITY
{% if salt['pillar.get']('slurm:PriorityType') in ['multifactor','basic'] -%}
PriorityType=priority/{{ salt['pillar.get']('slurm:PriorityType','basic' )}}
{% endif -%}

PriorityFlags=SMALL_RELATIVE_TO_TIME
PriorityDecayHalfLife=14-0
PriorityCalcPeriod=5
PriorityFavorSmall=NO
PriorityMaxAge=14-0
PriorityUsageResetPeriod=NONE
PriorityWeightAge=10000
PriorityWeightFairshare=10000
PriorityWeightJobSize=10000
PriorityWeightPartition=1000000
PriorityWeightQOS=1000000
#
#
# LOGGING AND ACCOUNTING
{% if 'AccountingStorageEnforce' in pillar['slurm']  -%}
AccountingStorageEnforce={% for ASEnforce in pillar['slurm']['AccountingStorageEnforce'].iteritems() -%}
    {%- if ASEnforce in ['associations','limits','qos','safe','wckeys'] -%}{{ ','.join(ASEnforce) }} {%- endif -%}
  {%- endfor -%}
{%- endif %}
AccountingStorageHost={{ salt['pillar.get']('slurm:AccountingStorageHost', 'localhost') }}
AccountingStorageLoc={{ salt['pillar.get']('slurm:AccountingStorageLoc', 'slurm_acct_db')}}
AccountingStoragePass={{ salt['pillar.get']('slurm:AccountingStoragePass','slurm')}}
AccountingStoragePort={{ salt['pillar.get']('slurm:AccountingStoragePort','6819' )}}
AccountingStorageType=accounting_storage/{{ salt['pillar.get']('slurm:AccountingStorageType','filetxt' )}}
AccountingStorageUser={{ salt['pillar.get']('slurm:AccountingStorageUser', 'slurm')}}
AccountingStoreJobComment=YES



DebugFlags=GRES
#JobCompHost=
JobCompLoc={{ salt['pillar.get']('slurm:JobCompLoc','/var/log/slurm/slurm_jobcomp.log' )}}
#JobCompLoc=
#JobCompPass=
#JobCompPort=
JobCompType=jobcomp/filetxt
#JobCompUser=
JobAcctGatherFrequency=30
{% if salt['pillar.get']('slurm:JobAcctGatherType') in ['none','linux','cgroup'] -%}
JobAcctGatherType=JobacctGatherType/{{ pillar['slurm']['JobacctGatherType'] }}
{%- endif %}
JobAcctGatherType=jobacct_gather/linux
{% if salt['pillar.get']('slurm:AcctGatherEnergyType') in ['none','ipmi','ibmaem','cray','rapi'] -%}
AcctGatherEnergyType=acct_gather_energy/{{ pillar['slurm']['AcctGatherEnergyType'] }}
{%- endif %}

SlurmctldDebug=5
SlurmctldLogFile={{ salt['pillar.get']('slurm:SlurmctldLogFile',slurm.logdir+'/slurmctld.log' )}}
SlurmdDebug=5
SlurmdLogFile={{ salt['pillar.get']('slurm:SlurmdLogFile', slurm.logdir+'/slurmd-'+grains['nodename']+'.log')}}
SlurmSchedLogFile={{ salt['pillar.get']('slurm:SlurmSchedLogFile',slurm.logdir+'/slurmSched.log' )}}
{% if slurm_conf.SlurmSchedLogLevel is defined -%}
SlurmSchedLogLevel=5
{% endif -%}
#
#
# POWER SAVE SUPPORT FOR IDLE NODES (optional)
#SuspendProgram=
#ResumeProgram=
#SuspendTimeout=
#ResumeTimeout=
#ResumeRate=
#SuspendExcNodes=
#SuspendExcParts=
#SuspendRate=
#SuspendTime=
#
#
# COMPUTE NODES
NodeName={{ pillar['slurm']['ControlMachine'] }} State=DOWN
{% if pillar['slurm']['BackupController'] is defined -%}
NodeName={{ pillar['slurm']['BackupController'] }} State=DOWN
{%- endif %}

{% if pillar['slurm']['nodes'] is defined -%}
{% for type, nodes in pillar['slurm']['nodes'].iteritems() -%}
{% for node in nodes -%}
NodeName={{ node }}{% for key, value in nodedefs[type].iteritems()  %} {{ key }}={{ value }}{% endfor %}
{% endfor -%}
{% endfor -%}
{% endif -%}
{% if pillar['slurm']['partitions'] is defined -%}
{% set nodes=[] %}
{% for partition, partinfo in pillar['slurm']['partitions'].iteritems() -%}
PartitionName={{ partition }}{% for key, value in partinfo.iteritems() %}{% if key == 'nodes' %} Nodes={{ ','.join(value) }}{% else %} {{ key }}={{ value }}{% endif %}{% endfor %}
{% endfor -%}
{% endif -%}




